" Default location: ~/.vimrc

" ------------------------------------------------------------------------------
" ---------------------------------- Plugins -----------------------------------
" ------------------------------------------------------------------------------
"
" --------------------------------- Vim-Plug -----------------------------------
" Specify plugin directory
call plug#begin('~/.vim/plugins')

" YouCompleteMe - code completion engine
Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer --js-completer'}
" YouCompleteMe Generator - generate project files for YouCompleteMe
Plug 'rdnetto/YCM-Generator', {'branch': 'stable'}

" fuzzy finding
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'

" Git dots
Plug 'airblade/vim-gitgutter'

" NERDTree - File Explorer
Plug 'scrooloose/nerdtree'

" ALE Linter
Plug 'w0rp/ale'

" Airline - Status line
Plug 'vim-airline/vim-airline'
" Airline themes
Plug 'vim-airline/vim-airline-themes'

" EasyMotion - better vim navigations (f, t,...)
Plug 'easymotion/vim-easymotion'

" Unimpaired - useful keybindings
Plug 'tpope/vim-unimpaired'

" Better repeat with . e.g. for maps or other plugins
Plug 'tpope/vim-repeat'

" Change surroundings of text elements
Plug 'tpope/vim-surround'

" Comment and uncomment lines
Plug 'tpope/vim-commentary'

" Framework for new text objects following below
Plug 'kana/vim-textobj-user'
" New text objects
Plug 'kana/vim-textobj-line'

" Edit at multiple places
Plug 'terryma/vim-multiple-cursors'

" Autoformat files
Plug 'Chiel92/vim-autoformat'

" Better navigation between tmux and vim
Plug 'christoomey/vim-tmux-navigator'

" TableMode - Table creation for vim
Plug 'dhruvasagar/vim-table-mode'

" Molokai color scheme
Plug 'tomasr/molokai'

" " ---------------- Filetype plugins ---------------------
" Latex suite
Plug 'vim-latex/vim-latex', {'for': 'tex'}

" Better XML editing (tag completions, jumps, ...)
Plug 'sukima/xmledit', {'for': 'xml'}

" Typescript syntax and other settings
Plug 'leafgarland/typescript-vim', {'for': 'typescript'}

" Swift syntax highlighting
Plug 'keith/swift.vim', {'for': 'swift'}

" Better Python syntax highlighting
Plug 'hdima/python-syntax', {'for': 'python'}

" Python syntax annotations according to pep8
Plug 'nvie/vim-flake8', {'for': 'python'}

" Python folding
Plug 'tmhedberg/SimpylFold', {'for': 'python'}

" Python indentation
Plug 'vim-scripts/indentpython.vim', {'for': 'python'}

" Init plugin system
call plug#end()

" ------------------------------------------------------------------------------
" --------------------------------- Key bindings -------------------------------
" ------------------------------------------------------------------------------

set timeoutlen=500
set ttimeoutlen=10
let mapleader=" "
noremap \ "

" New line without insert
nnoremap <leader>o o<Esc>k
nnoremap <leader>O O<ESC>j

" Keybinding for yanking and pasting from system keyboard
noremap <leader>p "+p
noremap <leader>P "+P
noremap <leader>y "+y
noremap <leader>d "+d

" resize horizontal splits
nnoremap <leader>hr :resize
"resize vertical splits
nnoremap <leader>vr :vertical resize

" Forward and backward movement in command mode
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-k> <Up>
cnoremap <C-j> <Down>

" Toggle highlight search
noremap <leader>hls :set hls!<CR>


" ------------------------------------------------------------------------------
" ------------------------------ Plugin Settings -------------------------------
" ------------------------------------------------------------------------------

" Ack/Ag -----------------------------------------------------------------------
if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif
nnoremap <leader>/ :Ack!<space>

" --------------------------------- Airline ------------------------------------
set laststatus=2 " show always
let g:airline_powerline_fonts = 1 " powerline font

" ---------------------------- autoformat --------------------------------------
nnoremap <leader>af :Autoformat<CR>

" fzf --------------------------------------------------------------------------
let $FZF_DEFAULT_COMMAND = 'rg -g "!.git/*"'
nnoremap <C-g> :Buffers<CR>
nnoremap <C-p> :Files<CR>

" gitgutter --------------------------------------------------------------------
set updatetime=100

" -------------------------------- NERDTree ------------------------------------
let g:NERDTreeIgnore = ['bin', 'node_modules']
nmap <leader>nt :NERDTreeToggle<CR>

" ------------------------------ SimpylFold ------------------------------------
let g:SimpylFold_docstring_preview=1

" ------------------------------- Syntastic ------------------------------------
let g:syntastic_javascript_checkers = ['jshint']

" ------------------------------ Table Mode ------------------------------------
let g:table_mode_header_fillchar= '-'
let g:table_mode_corner="|"
nnoremap <leader>at :TableModeRealign<CR>

" ------------------------------ Vim-Latex -------------------------------------
let g:tex_flavor = 'latex'
set grepprg=grep\ -nH\ $*
set iskeyword+=:
let g:tex_indent_items = 0

" Better and more latex environment insertions
let g:Tex_Env_figure="\\begin{figure}[<+htpb+>]\<CR>\\caption{<+caption text+>}\\label{fig:<+label+>}\<CR>\\end{figure}<++>"
" IMAP is a function provided by vim-latex which is an alternative for imap
" and also matches if you don't type in the chars in the exact sequence
" indicated
autocmd FileType tex call IMAP('EGR', "\\begin{figure}[<+htpb+>]\<CR>\\centering\<CR>\\includegraphics[<+figopt+>]{<+file+>}\<CR>\\caption{<+caption text+>}\\label{fig:<+label+>}\<CR>\\end{figure}<++>", 'tex')
autocmd FileType tex call IMAP('DIT', '\item[<+label+>] <++>', 'tex')
autocmd FileType tex call IMAP('IT', '\item <++>', 'tex')

autocmd FileType tex imap <buffer> <C-j> <Plug>IMAP_JumpForward

" ----------------------------- YouCompleteMe ----------------------------------
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
let g:ycm_python_binary_path = 'python' " Enable python autocomplete
let g:EclimCompletionMethod = 'omnifunc' " Use omnifunc for completion
" Set ycm identifier completion to 5 (problems with enumerate expansion if
" lower)
nmap <leader>rr :YcmCompleter RefactorRename
nmap <leader>gt :YcmCompleter GoTo<CR>


" ------------------------------------------------------------------------------
" --------------------------------- General ------------------------------------
" ------------------------------------------------------------------------------
" turn off compat mode for vi
set nocompatible

" syntax highlighting
syntax on

" spell check
set spell

" (relative) line numbers
set number
set relativenumber

" Indent configuration
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set smarttab
set autoindent
set breakindent

" Show trailing whitespaces
set listchars=tab:•\ ,trail:•,extends:»,precedes:«
set invlist

" Search
set ignorecase
set smartcase

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
	let @/ = ''
	if exists('#auto_highlight')
		au! auto_highlight
		augroup! auto_highlight
		echo 'Highlight current word: off'
		return 0
	else
		augroup auto_highlight
			au!
			au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
		augroup end
		echo 'Highlight current word: ON'
		return 1
	endif
endfunction

" folding
set foldmethod=syntax
set foldlevelstart=100
let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

" Scrolling
set scrolloff=3 " Keep 3 lines below and above the cursor

" Open splits on the right of existing ones
set splitright
" Open splits below existing ones
set splitbelow

" Enabling mouse scrolling
set mouse=a

" Show as much as possible of a wrapped last line, not just "@".
set display=lastline

" ------------------------------------------------------------------------------
" ---------------------------------- Appearance --------------------------------
" ------------------------------------------------------------------------------
set termguicolors
" Good color alts: monokai (sublime default), one (atom default), OceanicNext
colo molokai
let g:airline_theme='badwolf' " reset nice airline theme
" Brighter number column
hi LineNr guifg=#aaaaaa
hi SpellBad guibg=#6d0000
hi Normal guibg=#262626


" ------------------------------------------------------------------------------
" ------------------------- Filetype specific stuff ----------------------------
" ------------------------------------------------------------------------------
" ------------------ Javascript ------------------
autocmd FileType javascript setlocal tabstop=4

" ------------------ Markdown --------------------
autocmd FileType markdown setlocal foldmethod=indent

" ------------------ Python ----------------------
autocmd FileType python let python_highlight_all=1
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal textwidth=80
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal autoindent
autocmd FileType python setlocal fileformat=unix

" --------------------- Tex ----------------------
autocmd FileType tex noremap <buffer> <C-r>b :w<CR>:!make<CR>
autocmd FileType tex setlocal spell
autocmd FileType tex setlocal foldlevel=100
" Automatically enter a comment leader when hitting Enter or o/O
autocmd FileType tex setlocal formatoptions+=ro


" ------------------------------------------------------------------------------
" ------------------------------- Functions ------------------------------------
" ------------------------------------------------------------------------------
function! s:DiffWithSaved()
	let filetype=&ft
	diffthis
	vnew | r # | normal! 1Gdd
	diffthis
	exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
