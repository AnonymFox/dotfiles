" Default location: ~/.vimrc

" ------------------------------------------------------------------------------
" ---------------------------------- Plugins -----------------------------------
" ------------------------------------------------------------------------------
"
" --------------------------------- Vim-Plug -----------------------------------
" Specify plugin directory
call plug#begin('~/.vim/plugins')

" YouCompleteMe - code completion engine
Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer --tern-completer --system-libclang'}
" YouCompleteMe Generator - generate project files for YouCompleteMe
Plug 'rdnetto/YCM-Generator', {'branch': 'stable'}

" Ctrl-P - Fuzzy finder
Plug 'kien/ctrlp.vim'

" NERDTree - File Explorer
Plug 'scrooloose/nerdtree'

" Syntastic - Syntax checker
Plug 'scrooloose/syntastic'

" Airline - Status line
Plug 'vim-airline/vim-airline'
" Airline themes
Plug 'vim-airline/vim-airline-themes'

" EasyMotion - better vim navigations (f, t,...)
Plug 'easymotion/vim-easymotion'

" Unimpaired - useful keybindings
Plug 'tpope/vim-unimpaired'

" Better repeat with . e.g. for maps or other plugins
Plug 'tpope/vim-repeat'

" Change surroundings of text elements
Plug 'tpope/vim-surround'

" Comment and uncomment lines
Plug 'tpope/vim-commentary'

" Framework for new text objects following below
Plug 'kana/vim-textobj-user'
" New text objects
Plug 'kana/vim-textobj-line'

" Edit at multiple places
Plug 'terryma/vim-multiple-cursors'

" Supertab - tab for insert completions
Plug 'ervandew/supertab'

" Autoformat files
Plug 'Chiel92/vim-autoformat'

" Ultisnips - snippet engine
Plug 'SirVer/ultisnips'
" Snippets for ultisnips
Plug 'honza/vim-snippets'

" Better navigation between tmux and vim
Plug 'christoomey/vim-tmux-navigator'

" TableMode - Table creation for vim
Plug 'dhruvasagar/vim-table-mode'

" Onedark color scheme
Plug 'joshdick/onedark.vim'

" ---------------- Filetype plugins ---------------------
" Latex suite
Plug 'vim-latex/vim-latex', {'for': 'tex'}

" Better XML editing (tag completions, jumps, ...)
Plug 'sukima/xmledit', {'for': 'xml'}

" Typescript syntax and other settings
Plug 'leafgarland/typescript-vim', {'for': 'typescript'}

" Swift syntax highlighting
Plug 'keith/swift.vim', {'for': 'swift'}

" Better Python syntax highlighting
Plug 'hdima/python-syntax', {'for': 'python'}
" Python syntax annotations according to pep8
Plug 'nvie/vim-flake8', {'for': 'python'}
" Python folding
Plug 'tmhedberg/SimpylFold', {'for': 'python'}
" Python indentation
Plug 'vim-scripts/indentpython.vim', {'for': 'python'}

" Init plugin system
call plug#end()

" --------------------------------- Airline ------------------------------------
set laststatus=2 " show always
let g:airline_powerline_fonts = 1 " powerline font

" ---------------------------- autoformat --------------------------------------
noremap <leader>af :Autoformat<CR>

" ---------------------------------- CtrlP -------------------------------------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g_ctrlp_working_path_mode = 'ra'

" -------------------------------- NERDTree ------------------------------------
let g:NERDTreeIgnore = ['bin', 'node_modules']
nmap <leader>nt :NERDTreeToggle<CR>

" ------------------------------ SimpylFold ------------------------------------
let g:SimpylFold_docstring_preview=1

" ------------------------------- Syntastic ------------------------------------
let g:syntastic_javascript_checkers = ['jshint']

" ------------------------------ Table Mode ------------------------------------
let g:table_mode_header_fillchar= '-'
let g:table_mode_corner="|"
nnoremap <leader>at :TableModeRealign<CR>

" ------------------------------ UltiSnips -------------------------------------
let g:UltiSnipsExpandTrigger = "<C-e>"
let g:UltiSnipsJumpForwardTrigger = "<C-S-n>"
let g:UltiSnipsJumpBackwardTrigger = "<C-S-P>"

" ------------------------------ Vim-Latex -------------------------------------
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
nmap <C-Space> <Plug>Tex_FastEnvironmentInsert 
imap <C-j> <Plug>IMAP_JumpForward
let g:Tex_Env_figure="\\begin{figure}[<+htpb+>]\<CR>\\centering\<CR>\\includegraphics[<+figopt+>]{<+file+>}\<CR>\\caption{<+caption text+>}\\label{fig:<+label+>}\<CR>\\end{figure}<++>"
let g:Tex_Env_enumerate="\\begin{enumerate}\<CR>\\item <++>\<CR>\\end{enumerate}<++>"
let g:Tex_Env_itemize="\\begin{itemize}\<CR>\\item <++>\<CR>\\end{itemize}<++>"


" ----------------------------- YouCompleteMe ----------------------------------
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
let g:ycm_python_binary_path = 'python' " Enable python autocomplete
let g:EclimCompletionMethod = 'omnifunc' " Use omnifunc for completion
nmap <leader>rr :YcmCompleter RefactorRename
nmap <leader>gt :YcmCompleter GoTo<CR>


" ------------------------------------------------------------------------------
" --------------------------------- Key bindings -------------------------------
" ------------------------------------------------------------------------------

" New line without insert
nnoremap <leader>o o<Esc>k
nnoremap <leader>O O<ESC>j

" Split switches
nnoremap <C-j> <C-W><C-J>
nnoremap <C-k> <C-W><C-K>
nnoremap <C-h> <C-W><C-H>
nnoremap <C-l> <C-W><C-L>

" Keybinding for yanking and pasting from system keyboard
noremap <leader>p "+p
noremap <leader>P "+P
noremap <leader>y "+y

" resize horizontal splits
nnoremap <leader>hr :resize 
"resize vertical splits
nnoremap <leader>vr :vertical resize 

" change register leader key
noremap <space> "

" Forward and backward movement in command mode
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-k> <Up>
cnoremap <C-j> <Down>


" ------------------------------------------------------------------------------
" --------------------------------- General ------------------------------------
" ------------------------------------------------------------------------------
" turn off compat mode for vi
set nocompatible 

" syntax highlighting
syntax on 

" spell check
set spell

" (relative) line numbers
set number
set relativenumber

" Indent configuration
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set smarttab
set autoindent
set breakindent

" Show trailing whitespaces
set listchars=tab:•\ ,trail:•,extends:»,precedes:« 
set invlist

" Search
set ignorecase
set smartcase

" Highlight all occurrences of word under cursor
autocmd CursorMoved * silent! exe printf('match IncSearch /\<%s\>/', expand('<cword>'))

" folding
set foldmethod=syntax
set foldlevelstart=1
let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

" Scrolling
set scrolloff=3 " Keep 3 lines below and above the cursor


" ------------------------------------------------------------------------------
" ---------------------------------- Appearance --------------------------------
" ------------------------------------------------------------------------------
" Good color alts: monokai (sublime default), one (atom default), OceanicNext
set t_Co=256
colo onedark
let g:airline_theme='badwolf' " reset nice airline theme
hi Normal ctermbg=none


" ------------------------------------------------------------------------------
" ------------------------- Filetype specific stuff ----------------------------
" ------------------------------------------------------------------------------
" ------------------ Javascript ------------------
autocmd FileType javascript setlocal tabstop=4

" ------------------ Markdown --------------------
autocmd FileType markdown set foldmethod=indent
autocmd FileType markdown set foldlevel=1

" ------------------ Python ----------------------
autocmd FileType python let python_highlight_all=1
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal textwidth=80
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal autoindent
autocmd FileType python setlocal fileformat=unix

" --------------------- Tex ----------------------
" TIP: if you write your \label's as \label{fig:something}, then if you
" type in \ref{fig: and press <C-n> you will automatically cycle through
" all the figure labels. Very useful!
autocmd FileType tex set iskeyword+=:
" Ctrl+Shift+b for building
autocmd FileType tex noremap <C-S-b> :w<CR>:!make<CR>


" ------------------------------------------------------------------------------
" ------------------------------- Functions ------------------------------------
" ------------------------------------------------------------------------------
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
